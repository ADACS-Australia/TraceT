# Generated by Django 4.0.4 on 2022-07-21 05:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [
        ("trigger_app", "0001_initial"),
        ("trigger_app", "0002_proposalsettings_atca_min_exptime"),
        ("trigger_app", "0003_remove_telescopeprojectid_atca_email"),
        ("trigger_app", "0004_telescopeprojectid_atca_email"),
        ("trigger_app", "0005_proposalsettings_trig_any_duration_and_more"),
        ("trigger_app", "bak_0006_manual_migration"),
        ("trigger_app", "0001_alter_telescopeprojectid_password"),
        ("trigger_app", "0002_alter_telescopeprojectid_password"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CometLog",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("log", models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="EventTelescope",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Telescope that we receive VOEvents from (e.g. SWIFT or Fermi)",
                        max_length=64,
                        unique=True,
                        verbose_name="Event Telescope name",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PossibleEventAssociation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "earliest_event_observed",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("latest_event_observed", models.DateTimeField(blank=True, null=True)),
                ("ra", models.FloatField(blank=True, null=True)),
                ("dec", models.FloatField(blank=True, null=True)),
                ("ra_hms", models.CharField(blank=True, max_length=64, null=True)),
                ("dec_dms", models.CharField(blank=True, max_length=64, null=True)),
                ("pos_error", models.FloatField(blank=True, null=True)),
                ("recieved_data", models.DateTimeField(auto_now_add=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("GRB", "Gamma-ray burst"),
                            ("FS", "Flare star"),
                            ("NU", "Neutrino"),
                            ("GW", "Gravitational wave"),
                        ],
                        max_length=3,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="ProposalSettings",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "proposal_id",
                    models.CharField(
                        help_text="A short identifier of the proposal of maximum lenth 16 charcters.",
                        max_length=16,
                        unique=True,
                        verbose_name="Proposal ID",
                    ),
                ),
                (
                    "proposal_description",
                    models.CharField(
                        help_text="A brief description of the proposal. Only needs to be enough to distinguish it from the other proposals.",
                        max_length=256,
                    ),
                ),
                (
                    "trig_min_duration",
                    models.FloatField(default=0.256, verbose_name="Min"),
                ),
                (
                    "trig_max_duration",
                    models.FloatField(default=1.024, verbose_name="Max"),
                ),
                (
                    "pending_min_duration_1",
                    models.FloatField(default=1.025, verbose_name="Min"),
                ),
                (
                    "pending_max_duration_1",
                    models.FloatField(default=2.056, verbose_name="Max"),
                ),
                (
                    "pending_min_duration_2",
                    models.FloatField(default=0.128, verbose_name="Min"),
                ),
                (
                    "pending_max_duration_2",
                    models.FloatField(default=0.255, verbose_name="Max"),
                ),
                (
                    "maximum_position_uncertainty",
                    models.FloatField(
                        default=0.05,
                        help_text="A VOEvent must have less than or equal to this position uncertainty to be observed.",
                        verbose_name="Maximum Position Uncertainty (deg)",
                    ),
                ),
                (
                    "fermi_prob",
                    models.FloatField(
                        default=50,
                        help_text="The minimum probability to observe for Fermi sources (it appears to be a percentage, e.g. 50).",
                    ),
                ),
                (
                    "swift_rate_signf",
                    models.FloatField(
                        default=0.0,
                        help_text='The minimum "RATE_SIGNIF" (appears to be a signal-to-noise ratio) to observe for SWIFT sources (in sigma).',
                    ),
                ),
                (
                    "antares_min_ranking",
                    models.IntegerField(
                        default=2,
                        help_text="The minimum rating (1 is best) to observe for Antares sources.",
                    ),
                ),
                (
                    "repointing_limit",
                    models.FloatField(
                        default=10.0,
                        help_text="An updated position must be at least this far away from a current observation before repointing (in degrees).",
                        verbose_name="Repointing Limit (deg)",
                    ),
                ),
                (
                    "testing",
                    models.BooleanField(
                        default=False,
                        help_text="If testing, will not schedule any observations.",
                    ),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("GRB", "Gamma-ray burst"),
                            ("FS", "Flare star"),
                            ("NU", "Neutrino"),
                            ("GW", "Gravitational wave"),
                        ],
                        max_length=3,
                        verbose_name="What type of source to will you trigger on?",
                    ),
                ),
                (
                    "mwa_freqspecs",
                    models.CharField(
                        default="144,24",
                        help_text="The frequency channels IDs for the MWA to observe at.",
                        max_length=256,
                        verbose_name="MWA frequency specifications",
                    ),
                ),
                (
                    "mwa_nobs",
                    models.IntegerField(
                        default=1,
                        help_text="The number of observations to schedule.",
                        verbose_name="Number of Observations",
                    ),
                ),
                (
                    "mwa_exptime",
                    models.IntegerField(
                        default=896,
                        help_text="Exposure time of each observation scheduled, in seconds (must be modulo-8 seconds).",
                        verbose_name="Observation time (s)",
                    ),
                ),
                (
                    "mwa_calexptime",
                    models.FloatField(
                        default=120.0,
                        help_text="Exposure time of the trailing calibrator observation, if applicable, in seconds.",
                        verbose_name="Calibrator Observation time (s)",
                    ),
                ),
                (
                    "mwa_freqres",
                    models.FloatField(
                        default=10.0,
                        help_text="Correlator frequency resolution for observations. None to use whatever the current mode is, for lower latency. Eg 40.",
                        verbose_name="Frequency Resolution (kHz)",
                    ),
                ),
                (
                    "mwa_inttime",
                    models.FloatField(
                        default=0.5,
                        help_text="Correlator integration time for observations in seconds. None to use whatever the current mode is, for lower latency. Eg 0.5.",
                        verbose_name="Intergration Time (s)",
                    ),
                ),
                (
                    "mwa_horizon_limit",
                    models.FloatField(
                        default=10.0,
                        help_text="The minimum elevation of the source to observe (in degrees).",
                        verbose_name="Horizon limit (deg)",
                    ),
                ),
                (
                    "atca_band_3mm",
                    models.BooleanField(
                        default=False, verbose_name="Use 3mm Band (83-105 GHz)?"
                    ),
                ),
                (
                    "atca_band_3mm_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of the observation cycle at this frequency band.",
                        verbose_name="Band Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_band_3mm_freq1",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the first frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 1 (MHz)",
                    ),
                ),
                (
                    "atca_band_3mm_freq2",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the second frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 2 (MHz)",
                    ),
                ),
                (
                    "atca_band_7mm",
                    models.BooleanField(
                        default=False, verbose_name="Use 7mm Band (30-50 GHz)?"
                    ),
                ),
                (
                    "atca_band_7mm_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of the observation cycle at this frequency band.",
                        verbose_name="Band Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_band_7mm_freq1",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the first frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 1 (MHz)",
                    ),
                ),
                (
                    "atca_band_7mm_freq2",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the second frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 2 (MHz)",
                    ),
                ),
                (
                    "atca_band_15mm",
                    models.BooleanField(
                        default=False, verbose_name="Use 15mm Band (16-25 GHz)?"
                    ),
                ),
                (
                    "atca_band_15mm_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of the observation cycle at this frequency band.",
                        verbose_name="Band Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_band_15mm_freq1",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the first frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 1 (MHz)",
                    ),
                ),
                (
                    "atca_band_15mm_freq2",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the second frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 2 (MHz)",
                    ),
                ),
                (
                    "atca_band_4cm",
                    models.BooleanField(
                        default=False, verbose_name="Use 4cm Band (3.9-11.0 GHz)?"
                    ),
                ),
                (
                    "atca_band_4cm_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of the observation cycle at this frequency band.",
                        verbose_name="Band Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_band_4cm_freq1",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the first frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 1 (MHz)",
                    ),
                ),
                (
                    "atca_band_4cm_freq2",
                    models.IntegerField(
                        blank=True,
                        help_text="The centre of the second frequency channel in MHz.",
                        null=True,
                        verbose_name="Centre frequency 2 (MHz)",
                    ),
                ),
                (
                    "atca_band_16cm",
                    models.BooleanField(
                        default=False, verbose_name="User 16cm Band (1.1-3.1 GHz)?"
                    ),
                ),
                (
                    "atca_band_16cm_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of the observation cycle at this frequency band.",
                        verbose_name="Band Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_max_exptime",
                    models.IntegerField(
                        default=720,
                        help_text="Total exposure time of all the observations combined.",
                        verbose_name="Maximum Exposure Time (mins)",
                    ),
                ),
                (
                    "atca_prioritise_source",
                    models.BooleanField(
                        default=False,
                        help_text="Prioritise time on source rather than time on calibrator.",
                        verbose_name="Prioritise Source?",
                    ),
                ),
                (
                    "event_telescope",
                    models.ForeignKey(
                        blank=True,
                        help_text="The telescope that this proposal will accept at least one VOEvent from before observing. Leave blank if you want to accept all telescopes.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="trigger_app.eventtelescope",
                        to_field="name",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(blank=True, max_length=64, null=True, unique=True),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Running"), (1, "Broken"), (2, "Stopped")]
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Telescope",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="E.g. MWA_VCS, MWA_correlate or ATCA.",
                        max_length=64,
                        unique=True,
                        verbose_name="Telescope name",
                    ),
                ),
                (
                    "lon",
                    models.FloatField(verbose_name="Telescope longitude in degrees"),
                ),
                (
                    "lat",
                    models.FloatField(verbose_name="Telescope latitude in degrees"),
                ),
                (
                    "height",
                    models.FloatField(
                        verbose_name="Telescope height above sea level in meters"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TriggerID",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("trigger_id", models.BigIntegerField(unique=True)),
                (
                    "earliest_event_observed",
                    models.DateTimeField(blank=True, null=True),
                ),
                ("latest_event_observed", models.DateTimeField(blank=True, null=True)),
                ("ra", models.FloatField(blank=True, null=True)),
                ("dec", models.FloatField(blank=True, null=True)),
                ("ra_hms", models.CharField(blank=True, max_length=64, null=True)),
                ("dec_dms", models.CharField(blank=True, max_length=64, null=True)),
                ("pos_error", models.FloatField(blank=True, null=True)),
                ("recieved_data", models.DateTimeField(auto_now_add=True)),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("GRB", "Gamma-ray burst"),
                            ("FS", "Flare star"),
                            ("NU", "Neutrino"),
                            ("GW", "Gravitational wave"),
                        ],
                        max_length=3,
                        null=True,
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="VOEvent",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("trigger_id", models.BigIntegerField(blank=True, null=True)),
                ("telescope", models.CharField(blank=True, max_length=64, null=True)),
                ("sequence_num", models.IntegerField(blank=True, null=True)),
                ("event_type", models.CharField(blank=True, max_length=64, null=True)),
                ("role", models.CharField(blank=True, max_length=64, null=True)),
                ("duration", models.FloatField(blank=True, null=True)),
                ("ra", models.FloatField(blank=True, null=True)),
                ("dec", models.FloatField(blank=True, null=True)),
                ("ra_hms", models.CharField(blank=True, max_length=64, null=True)),
                ("dec_dms", models.CharField(blank=True, max_length=64, null=True)),
                ("pos_error", models.FloatField(blank=True, null=True)),
                ("recieved_data", models.DateTimeField(auto_now_add=True)),
                ("event_observed", models.DateTimeField(blank=True, null=True)),
                ("xml_packet", models.CharField(max_length=10000)),
                ("ignored", models.BooleanField(default=True)),
                (
                    "source_name",
                    models.CharField(blank=True, max_length=128, null=True),
                ),
                (
                    "source_type",
                    models.CharField(
                        choices=[
                            ("GRB", "Gamma-ray burst"),
                            ("FS", "Flare star"),
                            ("NU", "Neutrino"),
                            ("GW", "Gravitational wave"),
                        ],
                        max_length=3,
                        null=True,
                    ),
                ),
                ("fermi_most_likely_index", models.FloatField(blank=True, null=True)),
                ("fermi_detection_prob", models.FloatField(blank=True, null=True)),
                ("swift_rate_signif", models.FloatField(blank=True, null=True)),
                ("antares_ranking", models.IntegerField(blank=True, null=True)),
                (
                    "associated_event_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="voevent",
                        to="trigger_app.possibleeventassociation",
                    ),
                ),
                (
                    "trigger_group_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="voevent",
                        to="trigger_app.triggerid",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="UserAlerts",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "type",
                    models.PositiveSmallIntegerField(
                        choices=[(0, "Email"), (1, "SMS"), (2, "Phone Call")]
                    ),
                ),
                ("address", models.CharField(blank=True, max_length=64, null=True)),
                ("alert", models.BooleanField(default=True)),
                ("debug", models.BooleanField(default=True)),
                ("approval", models.BooleanField(default=True)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trigger_app.proposalsettings",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TelescopeProjectID",
            fields=[
                (
                    "id",
                    models.CharField(
                        help_text="The project ID for the telescope used to automatically schedule observations.",
                        max_length=64,
                        primary_key=True,
                        serialize=False,
                        verbose_name="Telescope Project ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(
                        help_text="The project password for the telescope used to automatically schedule observations.",
                        max_length=1024,
                        verbose_name="Telescope Project Password",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        help_text="A brief description of the project.", max_length=256
                    ),
                ),
                (
                    "telescope",
                    models.ForeignKey(
                        help_text="Telescope this proposal will observer with. If the telescope you want is not here add it on the admin page.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trigger_app.telescope",
                        to_field="name",
                        verbose_name="Telescope name",
                    ),
                ),
                (
                    "atca_email",
                    models.CharField(
                        blank=True,
                        help_text="The email address of someone that was on the ATCA observing proposal. This is an authentication step only required for ATCA.",
                        max_length=256,
                        null=True,
                        verbose_name="ATCA Proposal Email",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="proposalsettings",
            name="project_id",
            field=models.ForeignKey(
                help_text="This is the target telescopes's project ID that is used with a password to schedule observations.",
                on_delete=django.db.models.deletion.CASCADE,
                to="trigger_app.telescopeprojectid",
                verbose_name="Project ID",
            ),
        ),
        migrations.AddField(
            model_name="proposalsettings",
            name="telescope",
            field=models.ForeignKey(
                help_text="Telescope this proposal will observer with. If the telescope you want is not here add it on the admin page.",
                on_delete=django.db.models.deletion.CASCADE,
                to="trigger_app.telescope",
                to_field="name",
                verbose_name="Telescope name",
            ),
        ),
        migrations.CreateModel(
            name="ProposalDecision",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "decision",
                    models.CharField(
                        choices=[
                            ("P", "Pending"),
                            ("I", "Ignored"),
                            ("E", "Error"),
                            ("T", "Triggered"),
                            ("C", "Canceled"),
                        ],
                        default="P",
                        max_length=32,
                    ),
                ),
                (
                    "decision_reason",
                    models.CharField(blank=True, max_length=2056, null=True),
                ),
                ("trigger_id", models.BigIntegerField(blank=True, null=True)),
                ("duration", models.FloatField(blank=True, null=True)),
                ("ra", models.FloatField(blank=True, null=True)),
                ("dec", models.FloatField(blank=True, null=True)),
                ("ra_hms", models.CharField(blank=True, max_length=32, null=True)),
                ("dec_dms", models.CharField(blank=True, max_length=32, null=True)),
                ("pos_error", models.FloatField(blank=True, null=True)),
                ("recieved_data", models.DateTimeField(auto_now_add=True)),
                (
                    "proposal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="trigger_app.proposalsettings",
                    ),
                ),
                (
                    "trigger_group_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="trigger_app.triggerid",
                    ),
                ),
            ],
            options={
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Observations",
            fields=[
                (
                    "obsid",
                    models.CharField(max_length=128, primary_key=True, serialize=False),
                ),
                ("website_link", models.URLField(max_length=256)),
                ("reason", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "proposal_decision_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="trigger_app.proposaldecision",
                    ),
                ),
                (
                    "telescope",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trigger_app.telescope",
                        to_field="name",
                        verbose_name="Telescope name",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AdminAlerts",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("alert", models.BooleanField(default=True)),
                ("debug", models.BooleanField(default=False)),
                ("approval", models.BooleanField(default=False)),
                (
                    "proposal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="trigger_app.proposalsettings",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="proposalsettings",
            name="atca_min_exptime",
            field=models.IntegerField(
                default=30,
                help_text="Minimum total exposure time of all the observations combined for the observation to be viable. If this amount of time is not available, the observation will not be scheduled.",
                verbose_name="Minimum Exposure Time (mins)",
            ),
        ),
        migrations.AddField(
            model_name="proposalsettings",
            name="trig_any_duration",
            field=models.BooleanField(
                default=False,
                help_text="Will trigger on events with any duration which includes if they have None.",
                verbose_name="Any duration?",
            ),
        ),
    ]
